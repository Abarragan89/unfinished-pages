// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image  String?
  isAuthor      Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  blogImages    Image[]
  comments      Comment[]
  replyComments ReplyComment[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}

model Blog {
  id String @id @default(cuid())
  title String
  description String?
  likes Int @default(0)
  readDuration Int @default(0)
  coverPhotoUrl String?
  coverPhotoAlt String?
  isPublished Boolean @default(false)
  content ContentBlock[]
  comments Comment[]
  userId   String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  publishedDate DateTime  @default(now()) 
  updatedAt DateTime @updatedAt
}

model ContentBlock {
  id String @id @default(cuid())
  orderNumber Int
  type String
  videoUrl String? // this is only for videos
  children ContentBlockDetails[]
  imageId   String?
  blogId String
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade )
  image  Image? @relation(fields: [imageId], references: [id])  
}

model ContentBlockDetails {
  id String @id @default(cuid())
  text String?
  bold Boolean?
  underline Boolean?
  italic Boolean?
  // List items are nested in another children array
  type String?
  url String?
  children BlockDetailsListItems[]
  contentBlockId String
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
}

model BlockDetailsListItems {
  id String @id @default(cuid())
  text String
  bold Boolean?
  underline Boolean?
  italic Boolean?
  type String? // this is for anchor tags that are in list items
  url String? // this is for anchor tags that are in list items
  children AnchorLinksInListItems[]
  blockDetailsId String
  blockDetails ContentBlockDetails @relation(fields: [blockDetailsId], references: [id], onDelete: Cascade)
}

model AnchorLinksInListItems {
  id String @id @default(cuid())
  text String
  parentListItemId String
  parentListItem BlockDetailsListItems @relation(fields: [parentListItemId], references: [id], onDelete: Cascade)
}

model Image {
  id String @id @default(cuid())
  url String
  alt String
  width Int
  height Int
  isBlogCover Boolean
  userId String
  contentBlocks ContentBlock[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) 
}


model Comment {
  id String @id @default(cuid())
  text String
  likes       Int         @default(0)
  createdAt   DateTime    @default(now()) 
  replies ReplyComment[]
  userId String
  blogId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade )
}

model ReplyComment {
  id String @id @default(cuid())
  text String
  likes       Int         @default(0)
  createdAt   DateTime    @default(now()) 
  userId String
  commentId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade )
}
