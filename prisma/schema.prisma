// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}


model Blog {
  id String @id @default(cuid())
  title String
  description String?
  date DateTime
  likes Int @default(0)
  dislikes Int @default(0)
  pictureURL String?
  keyWords String?
  isPublished Boolean @default(false)
  content BlogContentBlock[]
  userId   String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogContentBlock {
  id String @id @default(cuid())
  blogId String
  type String
  children ContentBlockText[]
  url String?
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade )
}

model ContentBlockText {
  id String @id @default(cuid())
  text String
  bold Boolean?
  underline Boolean?
  italic Boolean?
  contentBlockId String
  contentBlock BlogContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
}


// const blogContentBlocks = await prisma.blogContentBlock.findMany({
//   where: { blogId },
// });
