// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?         @db.VarChar(150)
  email         String          @unique @db.VarChar(320)
  emailVerified DateTime?
  image         String?
  isNotificationsOn Boolean     @default(true)
  lastNotificationEmailSent     DateTime   @default(now())
  isAuthor      Boolean         @default(false)
  isAdmin       Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  blogImages    Image[]
  notifications Notification[]
  comments      Comment[]
  commentLikes  CommentLike[]
  blogLikes     BlogLike[]
  authorRequest AuthorRequest?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}

model Notification {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    blogId      String
    blog        Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
    url         String
    message     String
    commentText String?
    createdAt   DateTime @default(now())
    isRead      Boolean  @default(false)
}

model Blog {
  id String @id @default(cuid())
  title String  @db.VarChar(70)
  description String? @db.VarChar(150)
  likes    BlogLike[]
  likeCount  Int   @default(0)
  readDuration Int @default(0)
  coverPhotoUrl String?
  coverPhotoAlt String? @db.VarChar(100)
  isPublished Boolean @default(false)
  // content ContentBlock[]
  content Json?
  categories BlogCategory[]
  notifications Notification[]
  tags String? @db.VarChar(200)
  comments Comment[]
  userId   String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  publishedDate DateTime  @default(now()) 
  updatedAt DateTime @updatedAt
  images Image[] @relation("BlogImages")
}

model BlogCategory {
  id String @id @default(cuid())
  name String @unique
  displayName String @unique
  blog Blog[]
}

model Image {
  id String @id @default(cuid())
  url String @unique 
  alt String @db.VarChar(100)
  width Int
  height Int
  isBlogCover Boolean
  userId String
  blogs Blog[] @relation("BlogImages")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) 
}

model Comment {
  id         String    @id @default(cuid())
  text       String    @db.VarChar(1000)
  likeCount  Int       @default(0)
  likes      CommentLike[]
  createdAt  DateTime  @default(now())
  userId     String
  blogId     String
  parentId   String?   // Null for top-level comments; set for replies
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog       Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")

  @@index([parentId]) // Optional: Improves performance when querying replies
}

model BlogLike {
  id      String   @id @default(cuid())
  userId  String
  blogId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog    Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) 
  @@unique([userId, blogId]) // Ensure a user can like a blog only once
}

model CommentLike {
  id      String   @id @default(cuid())
  userId  String
  commentId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@unique([userId, commentId]) // Ensure a user can like a blog only once
}

model AuthorRequest {
    id      String   @id @default(cuid())
    aboutText String @db.VarChar(3000)
    whyBlogText String @db.VarChar(3000)
    topicsText String @db.VarChar(3000)
    status String     @default("pending")
    replyMessage String? @db.VarChar(1000)
    userId  String   @unique
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime  @default(now()) 
}  



// model ContentBlock {
//   id String @id @default(cuid())
//   orderNumber Int
//   type String
//   videoUrl String? // this is only for videos
//   children ContentBlockDetails[]
//   imageId   String?
//   blogId String
//   blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade )
//   image  Image? @relation(fields: [imageId], references: [id])  
// }

// model ContentBlockDetails {
//   id String @id @default(cuid())
//   text String?
//   bold Boolean?
//   underline Boolean?
//   italic Boolean?
//   // List items are nested in another children array
//   type String?
//   url String?
//   children BlockDetailsListItems[]
//   contentBlockId String
//   contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
// }

// model BlockDetailsListItems {
//   id String @id @default(cuid())
//   text String
//   bold Boolean?
//   underline Boolean?
//   italic Boolean?
//   type String? // this is for anchor tags that are in list items
//   url String? // this is for anchor tags that are in list items
//   children AnchorLinksInListItems[]
//   blockDetailsId String
//   blockDetails ContentBlockDetails @relation(fields: [blockDetailsId], references: [id], onDelete: Cascade)
// }

// model AnchorLinksInListItems {
//   id String @id @default(cuid())
//   text String
//   parentListItemId String
//   parentListItem BlockDetailsListItems @relation(fields: [parentListItemId], references: [id], onDelete: Cascade)
// }